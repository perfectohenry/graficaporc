/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * J1_0_Punto.java
 *
 * Created on 11/05/2012, 02:40:17 PM
 */
package geometrias;

import java.awt.BorderLayout;
import javax.media.opengl.*;

/**
 *
 * @author hernan
 */
public class J1_0_Punto extends javax.swing.JFrame implements GLEventListener {

    static GL gl; // interface to OpenGL
    static GLCanvas canvas; // drawable in a frame

    /** Creates new form J1_0_Punto */
    public J1_0_Punto() {
        initComponents();

        // 1. specify a drawable: canvas
        canvas = new GLCanvas();

        // 2. listen to the events related to canvas: init, reshape, display, and displayChanged
        canvas.addGLEventListener(this);

        // 3. add the canvas to fill the Frame container
        // this.add(canvas, -1);
        getContentPane().add(canvas, BorderLayout.CENTER);
        // 4. interface to OpenGL functions
        gl = canvas.getGL();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(J1_0_Punto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(J1_0_Punto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(J1_0_Punto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(J1_0_Punto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new J1_0_Punto().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    // called once for OpenGL initialization
    public void init(GLAutoDrawable drawable) {

        //gl = drawable.getGL(); // just to show what the drawable provides

        // 6. specify a drawing color: gray
        gl.glColor3f(0.5f, 0.5f, 0.5f);
        gl.glDrawBuffer(GL.GL_FRONT_AND_BACK);
    }

    // called for handling reshaped drawing area
    public void reshape(GLAutoDrawable drawable, int x, int y, int width,
            int height) {

        // 7. specify the drawing area (frame) coordinates
        gl.glMatrixMode(GL.GL_PROJECTION);
        gl.glLoadIdentity();
        gl.glOrtho(0, width, 0, height, -1.0, 1.0);
    }

    // called for OpenGL rendering every reshape
    public void display(GLAutoDrawable drawable) {

        // 8. specify to draw a point
        gl.glPointSize(10); // just to make it large enough to be seen
        gl.glBegin(GL.GL_POINTS);
        gl.glVertex2i(WIDTH / 2, HEIGHT / 2);
        gl.glEnd();

        // sometimes more buffers are used, so draw it again. 
        drawable.repaint(); //Schedules a repaint of the component at some point in the future.
        //gl.glFlush(); // seems not needed anyway
    }

    // called if display mode or device are changed
    public void displayChanged(GLAutoDrawable drawable, boolean modeChanged,
            boolean deviceChanged) {
    }
}
